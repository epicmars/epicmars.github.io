<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Android on AndroidPi</title>
    <link>https://epicmars.github.io/blog/android/</link>
    <description>Recent content in Android on AndroidPi</description>
    <image>
      <url>https://epicmars.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://epicmars.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 Jun 2018 21:22:35 +0800</lastBuildDate><atom:link href="https://epicmars.github.io/blog/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>源码分析：理解Context</title>
      <link>https://epicmars.github.io/blog/android/framework/2018-06-14-android-understanding-context/</link>
      <pubDate>Thu, 14 Jun 2018 21:22:35 +0800</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/framework/2018-06-14-android-understanding-context/</guid>
      <description>Context一般翻译为上下文，它提供了一个应用环境的全局接口，用于访问指定应用的资源和类，以及各种应用级别的操作，如启动Activities与Service、发送广播与注册广播接收器、接收Intents、获取系统服务等等。
Application的Context ActivityThread.java
public static void main(String[] args) { // ... ActivityThread thread = new ActivityThread(); thread.attach(false); // ... } private void attach(boolean system) { // ... if (!system) { // ... final IActivityManager mgr = ActivityManager.getService(); try { mgr.attachApplication(mAppThread); } catch (RemoteException ex) { throw ex.rethrowFromSystemServer(); } // ... } // ... } ActivityManagerService.java
@Override public final void attachApplication(IApplicationThread thread) { synchronized (this) { int callingPid = Binder.getCallingPid(); final long origId = Binder.</description>
    </item>
    
    <item>
      <title>Android View事件处理机制与分发流程</title>
      <link>https://epicmars.github.io/blog/android/framework/2018-03-11-android-view-event-dispatching/</link>
      <pubDate>Sun, 11 Mar 2018 16:00:39 +0800</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/framework/2018-03-11-android-view-event-dispatching/</guid>
      <description>View类还包含一系列嵌套接口以及您可以更加轻松定义的回调。 这些接口称为事件侦听器，是您捕获用户与UI之间交互的票证。
尽管您通常会使用事件侦听器来侦听用户交互，但有时您确实需要扩展View类以构建自定义组件。也许，您想扩展 Button类来丰富某些内容的样式。 在这种情况下，您将能够使用该类的事件处理程序为类定义默认事件行为。
API 事件侦听器（Event Listeners） 事件侦听器是View类中包含一个回调方法的接口。 当用户与UI项目之间的交互触发已注册此视图的侦听器时，Android框架将调用这些方法。
各事件侦听器接口包含的回调方法如下：
onClick()
在 View.OnClickListener 中。 当用户触摸项目（处于触摸模式下）时，或者使用导航键或轨迹球聚焦于项目，然后按适用的“Enter”键或按下轨迹球时，将调用此方法。
onLongClick()
在 View.OnLongClickListener 中。 当用户触摸并按住项目（处于触摸模式下）时，或者使用导航键或轨迹球聚焦于项目，然后按住适用的“Enter”键或按住轨迹球（持续一秒钟）时，将调用此方法。
onFocusChange()
在 View.OnFocusChangeListener 中。 当用户使用导航键或轨迹球导航到或远离项目时，将调用此方法。 onKey() 在 View.OnKeyListener 中。 当用户聚焦于项目并按下或释放设备上的硬按键时，将调用此方法。
onTouch()
在 View.OnTouchListener 中。 当用户执行可视为触摸事件的操作时，其中包括按下、释放或屏幕上的任何移动手势（在项目边界内），将调用此方法。
onCreateContextMenu()
在 View.OnCreateContextMenuListener 中。 当（因持续“长按”而）生成上下文菜单时，将调用此方法。请参见菜单开发者指南中有关上下文菜单的阐述。 这些方法是其相应接口的唯一成员。
请注意，上述示例中的 onClick() 回调没有返回值，但是其他某些事件侦听器方法必须返回布尔值。具体原因取决于事件。 对于这几个事件侦听器，必须返回布尔值的原因如下：
onLongClick()：此方法返回一个布尔值，表示您是否已处理完事件，以及是否应该将它继续传下去。 也就是说，返回 true 表示您已经处理事件且事件应就此停止；如果您尚未处理事件和/或事件应该继续传递给其他任何点击侦听器，则返回 false。 onKey()：此方法返回一个布尔值，表示您是否已处理完事件，以及是否应该将它继续传下去。 也就是说，返回 true 表示您已经处理事件且事件应就此停止；如果您尚未处理事件和/或事件应该继续传递给其他任何按键侦听器，则返回 false。 onTouch()： 此方法返回一个布尔值，表示侦听器是否处理完此事件。重要的是，此事件可以拥有多个分先后顺序的操作。 因此，如果在收到关闭操作事件时返回 false，则表示您并未处理完此事件，而且对其后续操作也不感兴趣。 因此，您无需执行事件内的任何其他操作，如手势或最终操作事件。 事件处理程序(Event Handlers) 如果您从视图构建自定义组件，则将能够定义几种用作默认事件处理程序的回调方法。在有关自定义组件的文档中，您将了解某些用于事件处理的常见回调，其中包括：
onKeyDown(int, KeyEvent)：在发生新的按键事件时调用 onKeyUp(int, KeyEvent)：在发生按键弹起事件时调用 onTrackballEvent(MotionEvent)：在发生轨迹球运动事件时调用 onTouchEvent(MotionEvent)：在发生触摸屏运动事件时调用 onFocusChanged(boolean, int, Rect)：在视图获得或失去焦点时调用 还有一些其他方法值得您注意，尽管它们并非 View 类的一部分，但可能会直接影响所能采取的事件处理方式。 因此，在管理布局内更复杂的事件时，请考虑使用以下其他方法：</description>
    </item>
    
    <item>
      <title>Android View绘制流程</title>
      <link>https://epicmars.github.io/blog/android/framework/2018-03-08-android-view-drawing-flow/</link>
      <pubDate>Sun, 11 Mar 2018 15:00:39 +0800</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/framework/2018-03-08-android-view-drawing-flow/</guid>
      <description>概述 当一个Activity接收到焦点，它会请求对其布局进行绘制。Android框架会处理绘制的流程，但Activity必须提供布局层次的一个根节点。
绘制从布局的根节点开始，它需要对布局树进行测量并进行绘制。绘制通过遍历布局树对每个与失效区域（invalid region）相交的View进行绘制。依次地，每个ViewGroup请求它的每个子View进行绘制（使用draw()方法）并且每个View负责绘制它自身。因为布局树采用前序遍历，这意味着父View会在子View之前（也就是图层的下方）绘制，同时该父View的兄弟View会以它们在树中出现的顺序进行绘制。
框架不会绘制失效区域外的View对象，并且会处理好View背景的绘制，你可以通过调用invalidate()方法来强制一个View进行绘制。
布局的绘制需要经过两个过程的处理：
测量
测量过程在measure(int, int)方法中实现，它是对View树的自上而下的遍历。在递归过程中，每个View将尺寸规范沿树从上往下推，在测量过程的结尾，每个View都存储其测量结果。
布局
布局过程在layout(int, int, int, int)中实现，它也是自上而下的。在这个过程中，每个父View负责对其所有子View的位置进行定位，它需要使用测量过程中计算出的视图尺寸。
当一个View对象的measure()方法返回时，其getMeasuredWidth()和getMeasuredHeight()值必须被设定，对于该View的所有子孙View对象也是一样。一个View对象的测量的宽度和高度必须遵循父View施加的约束。这可以保证在测量过程的结尾，所有父视图都接收子视图的测量。一个父视图可能会在其子视图上多次调用measure()方法。例如，父视图可能使用未指定的尺寸规格对所有子视图进行测量，来找到子视图想要有多大，如果所有子视图不受约束的尺寸之和太大或者太小，这时候父视图会使用实际的尺寸规格再次调用measure()（也就是说，如果子视图不同意它们自己获取的空间，那么父视图会在第二次测量过程中介入并设定测量规则）。
为了初始化一个布局，可以调用requestLayout()。通常当一个View相信它当前的边界已经不适合它了，那么它会在自身上调用该方法。
测量过程采用两个类对尺寸进行沟通：
ViewGroup.LayoutParams
用于View对象来告知它们的父级它们想要如何被测量和定位。基础ViewGroup.LayoutParams仅描述了View在宽度和高度上想要有多大。对于每个尺寸，它可以指定如下值：
一个确切的数字 MATCH_PARENT，表示View想和父级一样大（不包括父级的padding） WRAP_CONTENT，表示View想要刚好足够包围其内容的大小（包括padding） MeasureSpec
用于从上往下将测量需求从父级推给子级。MeasureSpec可以有如下三种模式：
UNSPECIFIED：一个父视图可以用他来确定一个子View所期望的尺寸。例如，一个LinearLayout可以在其子视图上调用measure()，其中将高度设置为UNSPECIFIED并且宽度设置为EXACTLY 240来找出给定一个240像素的宽度时，子视图期望有多高。 EXACTLY：用于父视图给子视图施加一个确定的尺寸。子视图必须使用该尺寸，并且保证它所有的后代视图都是符合该尺寸限制的。 AT MOST：用于父视图给子视图施加一个最大的尺寸。子视图必须保证它以及其所有的后代都符合该尺寸的限制。 源码分析 整体流程 绘制从布局的根节点开始，它需要测量和和绘制布局树。 从ViewRootImpl的首次布局请求开始：
ViewRootImpl.java
final class TraversalRunnable implements Runnable { @Override public void run() { doTraversal(); } } @Override public void requestLayout() { if (!mHandlingLayoutInLayoutRequest) { checkThread(); mLayoutRequested = true; scheduleTraversals(); } } void scheduleTraversals() { if (!mTraversalScheduled) { mTraversalScheduled = true; mTraversalBarrier = mHandler.</description>
    </item>
    
    <item>
      <title>Window与WindowManager机制</title>
      <link>https://epicmars.github.io/blog/android/framework/2018-03-08-android-window/</link>
      <pubDate>Sat, 10 Mar 2018 22:22:08 +0800</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/framework/2018-03-08-android-window/</guid>
      <description>接着Activity的启动流程分析Window的添加过程，与Activity相关联的window的创建发生在Activity.performLaunchActivity()方法中，当activity实例创建后，会调用该activity的attach()方法，该方法中会创建window的实例，它是一个PhoneWindow对象，但此时该window实例还未设置布局，也未添加到WindowManager中：
Activity.java
final void attach(Context context, ActivityThread aThread, Instrumentation instr, IBinder token, int ident, Application application, Intent intent, ActivityInfo info, CharSequence title, Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances, Configuration config, String referrer, IVoiceInteractor voiceInteractor, Window window, ActivityConfigCallback activityConfigCallback) { attachBaseContext(context); mFragments.attachHost(null /*parent*/); mWindow = new PhoneWindow(this, window, activityConfigCallback); mWindow.setWindowControllerCallback(this); mWindow.setCallback(this); mWindow.setOnWindowDismissedCallback(this); mWindow.getLayoutInflater().setPrivateFactory(this); if (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) { mWindow.setSoftInputMode(info.softInputMode); } if (info.uiOptions != 0) { mWindow.setUiOptions(info.uiOptions); } mUiThread = Thread.currentThread(); mMainThread = aThread; mInstrumentation = instr; mToken = token; mIdent = ident; mApplication = application; mIntent = intent; mReferrer = referrer; mComponent = intent.</description>
    </item>
    
    <item>
      <title>Activity启动流程：总览</title>
      <link>https://epicmars.github.io/blog/android/framework/2018-03-07-android-launch-activity/</link>
      <pubDate>Wed, 07 Mar 2018 21:10:03 +0800</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/framework/2018-03-07-android-launch-activity/</guid>
      <description>网络上已经有许多关于这个主题的文章了，但路只有自己走一遍才会熟悉，源码的分析与理解也是一样的。因此从这篇文章开始我将开始从源码阅读中去理解Android Framework层以及更多系统相关的知识点。从点到线再到面地去掌握Android开发的武艺。
src/com/android/launcher3/Launcher.java 点击桌面应用Lanucher3的快捷方式:
/** * Launches the intent referred by the clicked shortcut. * * @param v The view representing the clicked shortcut. */ public void onClick(View v) { // Make sure that rogue clicks don&amp;#39;t get through while allapps is launching, or after the // view has detached (it&amp;#39;s possible for this to happen if the view is removed mid touch). if (v.getWindowToken() == null) { return; } if (!</description>
    </item>
    
    <item>
      <title>Android系统启动流程</title>
      <link>https://epicmars.github.io/blog/android/framework/2018-03-04-android-system-init-process/</link>
      <pubDate>Sun, 04 Mar 2018 18:31:20 +0800</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/framework/2018-03-04-android-system-init-process/</guid>
      <description>Android系统架构 1 2</description>
    </item>
    
    <item>
      <title>从MVC到MVVM</title>
      <link>https://epicmars.github.io/blog/android/architecture/2018-07-08-from-mvc-to-mvvm/</link>
      <pubDate>Sat, 08 Jul 2017 12:38:56 +0800</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/architecture/2018-07-08-from-mvc-to-mvvm/</guid>
      <description>MVP与MVVM，该选哪一个？ 目前为止，我在工作中用过的应用架构有基于Otto的总线模式和MVP模式，业余时间使用Clean架构和MVVM做过一些开发。对于这些模式有一些很好的开源项目可以参考:
Google应用架构蓝图 Clean结构示例 对于架构的搭建，除了采用第三方库以外，还可以使用Google官方的应用架构组件：
Android应用架构组件指南 架构组件示例 架构这么多，应该怎么选择？建议根据项目实际情况作出选择，如果只是一个小的玩具项目，可以不用任何架构，大的项目也不应该陷入了过度设计的误区。
概念 为什么需要这些架构以及怎么选择？首先要明确这些架构中的几个概念。从MVC被提出以来，发展到如今的MVP，MVVM等等，所有这些架构中有两个层都没有变化，那就是模型（Model）和视图（View）。
业务 业务是应用所提供的服务。可以是后端远程提供的服务以本地化的方式展现，也可以是单独的本地服务。
视图 视图是业务的用户界面（user interface）。它为用户提供操作和展示业务的接口，用户不一定是人，也可以是消息，例如一个外部的推送服务，它通过消息接口与业务交互，所以界面也不一定是肉眼可见的界面。
模型 模型是对业务在软件工程中的抽象与建模。它提供了开展所有业务需要数据实体和状态，以及管理这些数据和状态的接口。具体实现中一般是简单的数据访问与状态改变。
领域 一个应用领域指一个独立完整的应用。不同的应用属于不同的领域。它包含了对模型和以及与模型交互的抽象（这里与模型交互的抽象不是指对视图的抽象），一般不涉及具体的实现和具体的用户界面。
领域架构 这一架构主要是根据Clean架构的思想得来的，如果将Interface替换为UserCase那基本上就是Clean架构了。那么有何改进和区别，在上面链接的示例以及实际使用Clean架构中发现，如果使Domain完全成为一个Java库，然后在各个层之间定义对应的实体进行转换会增加大量的工作和复杂度。虽然说这样是为了达到完全的解耦，但很明显，这个Java库一般并不会用到非Android平台中，这样做的意义不大。还有一点是UserCase的使用过于冗余了，并且现在有了RxJava和LiveData这样的基于观察者模式的响应式编程库，在模型和视图的交互中，不用再编写大量的回调接口。
其中Domain层中的实体和Data层中的实体是一致的。并且不使用UserCase来进行交互，而是直接调用接口，然后从返回的被观察者更新视图就可以了。
这种基于Domain的模式是十分灵活和易于扩展的，即可以直接从View调用Domain中的接口，也可以在这两者间添加Presenter/Controller/ViewModel层。它仍具有Clean架构中分层的和解耦方面的优点，易于编写测试。可以说这种方式即适用于小型项目，也适用于中大型项目。
实现 Domain层是无关具体实现的，可以专门定义面向用户的接口，然后在Data层中实现。Data层中有实体对象访问的Dao和访问服务器的API等接口，并且可以采用仓储模式来隐藏访问的细节，这样Data中会多一层Repository接口。如果这样实现，视图和模型间会有用户接口和仓储接口这两层接口，显得有点冗余了。
这里有一个接口粒度的问题，可以认为是一个接口方法调用所需要完成工作的量，如果Domain中的接口粒度和Data仓储接口粒度一致，那么可以将两者合并。实际中发现，除非能够在应用开发前就确定两种接口的粒度大小，不然将它们两者分别实现没有太大的意义，但这样做不太现实，因为如果业务频繁地变更，Domain的接口也随之改变，无法在开发之初就完成这项工作。因此一开始将两种接口合并就好了，并且我们不希望业务变化时Data的接口也频繁地变化，不然两层之间的解耦就没有意义了，那么可以从Data层中去掉Repository接口，或者将其提升为Domain层的用户接口。</description>
    </item>
    
    <item>
      <title>Dagger2 Api</title>
      <link>https://epicmars.github.io/blog/android/library/2016-07-12-dagger2-api/</link>
      <pubDate>Tue, 12 Jul 2016 23:29:50 +0800</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/library/2016-07-12-dagger2-api/</guid>
      <description>Component注解 Component注解用于注解一个接口或抽象类，以便从其Module集合中生成一个完全成型的依赖注入实现。
每个使用@Component注解的类型必须包含至少一个抽象组件方法（Component methods），组件方法可以拥有任何名称，但其签名必须遵循供给和成员注入协约。
供给方法（Provision methods） 供给方法没有参数，并返回一个被注入或者被供给的类型，每个方法也可以有一个限定符注解，以下都是有效的供给方法：
SomeType getSomeType();Set&amp;lt;SomeType&amp;gt; getSomeTypes();@PortNumber int getPortNumber();供给方法和注入点一样可以使用Provider或Lazy更加显示地控制供给请求，Provider允许组件用户通过调用Provider.get()来请求任意次的供给，Lazy自始至终只会请求单个供给，但会将其推迟到对Lazy.get()的首次调用。以下供给方法都请求对同一类型的供给，但分别应用了不同的机制：
SomeType getSomeType();Provider&amp;lt;SomeType&amp;gt; getSomeTypeProvider();Lazy&amp;lt;SomeType&amp;gt; getLazySomeType();成员注入方法（Members-injection methods） 成员注入方法具有单个参数，并将依赖注入到传入实例的每个使用Inject注解的域和方法，一个成员注入方法可以是void的，也可以返回其单个参数以便链接。以下都是合法的成员注入方法声明：
void injectSomeType(SomeType someType);SomeType injectAndReturnSomeType(SomeType someType)一个没有参数但返回MembersInjector的方法和成员注入方法是等效的，在返回对象上调用MembersInjector.injectMembers(T)方法和成员注入方法的作用一样：
MembersInjector&amp;lt;SomeType&amp;gt; getSomeTypeMembersInjector();关于协方差的注意事项 尽管一个类型的成员注入方法会可以接收其子类的实例（参数是返回类型的子类），只有参数类型和其超类的Inject注解成员会被注入，而参数类型的子类则不会，例如，如下类型中，当将Child实例作为参数传入成员注入方法injectSelf(Self instance)时只有a和b会被注入，
class Parent {@Inject A a;}class Self extends Parent {@Inject B b;}class Child extends Self {@Inject C c;}实例化 组件（Component）的实例化主要通过生成的builder。一个builder实例通过组件上的builder()方法获取，返回的builder有一个方法用于设置每个modules() 和组件dependencies()，它们都以每个module或dependency类型的小写驼峰形式命名。每个缺少默认构造函数的组件dependency和module都必须显式地设置，但任何具有默认或无参构造函数（可以被组件实现访问）的module则可以忽略。如下所示：
public static void main(String[] args) {OtherComponent otherComponent = .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://epicmars.github.io/blog/android/framework/multiple-display/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/framework/multiple-display/</guid>
      <description>但是在模拟器有点问题</description>
    </item>
    
    <item>
      <title>Jetpack Compose这一篇就够了</title>
      <link>https://epicmars.github.io/blog/android/jetpack/2024-08-27-jetpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/jetpack/2024-08-27-jetpack/</guid>
      <description></description>
    </item>
    
    <item>
      <title>什么是Fragment</title>
      <link>https://epicmars.github.io/blog/android/framework/2018-06-17-android-fragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://epicmars.github.io/blog/android/framework/2018-06-17-android-fragment/</guid>
      <description>为什么需要Fragment? 在官方文档的翻译中，Fragment译为片段。那么它是谁的片段？当然是Activity的，其目的在于解决如下几个问题：
将臃肿的Activity类分解为小的Fragment 修复老版本中LocalActivityManager所带来的问题 封装导航状态，如Activity本地回退栈和可管理的对话框（DialogFragment） 分离主从式UI（Master/Detail） Fragment的功能 生命周期 回退栈管理 配置改变时保留实例 FragmentManager的状态管理 管理一个视图 在xml布局中使用&amp;lt;fragment&amp;gt; 如何高效使用Fragment 尽管在布局中可以使用&amp;lt;fragment&amp;gt;标签，但并不能将其等效为View。从它所位于的抽象层级上而言其等效于Activity，是位于View之上的，其中Android包之间的抽象层级如下所示：
高层级 | android.app| android.widget低层级 | android.viewv android.content 尽管AOSP中的代码可能并非严格遵循这一规则，但大体上如此。Fragment依赖于View的界面绘制与事件响应，但View对Fragment一无所知，Fragment拥有View之外的关于生命周期的知识，可以协调View之间的协作。
Fragment状态 实际上并不用去记忆Fragment复杂的生命周期，它的状态实际上由若干整形值进行标识，并且其状态转换基本上是一个线性的顺序:
static final int INITIALIZING = 0; // Not yet created. static final int CREATED = 1; // Created. static final int ACTIVITY_CREATED = 2; // The activity has finished its creation. static final int STOPPED = 3; // Fully created, not started. static final int STARTED = 4; // Created and started, not resumed.</description>
    </item>
    
  </channel>
</rss>
