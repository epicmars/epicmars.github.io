<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on 风格与布局</title>
    <link>https://www.androidpi.com/android/</link>
    <description>Recent content in Android on 风格与布局</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Mar 2020 10:52:05 +0800</lastBuildDate>
    
	<atom:link href="https://www.androidpi.com/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>美团Robust热修复集成</title>
      <link>https://www.androidpi.com/android/hotfix/2020-03-23-hotfix-robust/</link>
      <pubDate>Mon, 23 Mar 2020 10:52:05 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/hotfix/2020-03-23-hotfix-robust/</guid>
      <description>美团Robust简介 项目地址：https://github.com/Meituan-Dianping/Robust</description>
    </item>
    
    <item>
      <title>在架构组件中使用Kotlin协程</title>
      <link>https://www.androidpi.com/android/kotlin/2020-03-08-kotlin-coroutines/</link>
      <pubDate>Sun, 08 Mar 2020 15:14:39 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/kotlin/2020-03-08-kotlin-coroutines/</guid>
      <description>协程是一种并行设计模式，在Android中使用协程可以帮助我们简化异步代码，它解决了这两个主要问题： 管理可能会阻塞主线程的长时间任务。 提供了</description>
    </item>
    
    <item>
      <title>JetBooster：基于JetPack的快速开发框架</title>
      <link>https://www.androidpi.com/android/opensource/2019-12-30-jetbooster/</link>
      <pubDate>Mon, 30 Dec 2019 14:28:54 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/opensource/2019-12-30-jetbooster/</guid>
      <description>需求 与架构契合的依赖注入库 符合JetPack架构组件的一套简明的架构基础设施 依赖注入 设计原则 遵循约定优于配置的原则 不是为了设计一个全面的DI</description>
    </item>
    
    <item>
      <title>NDK开发之：集成gifsicle库</title>
      <link>https://www.androidpi.com/android/develop/2019-11-05-ndk-develop-gifsicle/</link>
      <pubDate>Tue, 05 Nov 2019 13:47:54 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2019-11-05-ndk-develop-gifsicle/</guid>
      <description>Gifsicle中包含三个工具： Gifsicle GifView GifDiff</description>
    </item>
    
    <item>
      <title>Android开发：触控手势</title>
      <link>https://www.androidpi.com/android/ui/2018-11-08-touch-gesture/</link>
      <pubDate>Thu, 08 Nov 2018 20:11:53 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/ui/2018-11-08-touch-gesture/</guid>
      <description>检测常用手势 GestureDetector 参考： Use touch gestures</description>
    </item>
    
    <item>
      <title>Android Studio之Gradle的使用</title>
      <link>https://www.androidpi.com/android/tools/2018-10-21-debug-gradle-build-scripts/</link>
      <pubDate>Sun, 21 Oct 2018 16:32:59 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/tools/2018-10-21-debug-gradle-build-scripts/</guid>
      <description>调试Gradle脚本 添加Remote运行Configuration 在命令行运行gradle任务，并添加参数-Dorg.gradle.daem</description>
    </item>
    
    <item>
      <title>Android性能：Android Vitals</title>
      <link>https://www.androidpi.com/android/performance/2018-10-16-android-vitals/</link>
      <pubDate>Tue, 16 Oct 2018 11:20:13 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/performance/2018-10-16-android-vitals/</guid>
      <description>Core vitals ANR rates Crash rates Excessive wakeups 部分唤醒锁定操作卡住（Stuck partial wake locks） All other vitals Excessive background Wi-Fi scans Excessive background network usage App startup time Slow rendering Frozen frames Permission denials 工具 部分唤醒锁定操作卡住（Stuck</description>
    </item>
    
    <item>
      <title>页面路由与组件化开发框架：PageRouter</title>
      <link>https://www.androidpi.com/android/opensource/2018-10-15-pagerouter/</link>
      <pubDate>Mon, 15 Oct 2018 11:22:52 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/opensource/2018-10-15-pagerouter/</guid>
      <description>页面路由 ### 需求 使用注解定义路由路径，注意如果注解的类型是Fragment，那么可以将Fragment加载到一个单独模版Activity进行展</description>
    </item>
    
    <item>
      <title>布局绑定库：LayoutBinder</title>
      <link>https://www.androidpi.com/android/opensource/2018-10-15-layoutbinder/</link>
      <pubDate>Mon, 15 Oct 2018 10:56:29 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/opensource/2018-10-15-layoutbinder/</guid>
      <description>特点 减少模板代码，便于导航到布局编辑器 可用于所有Activity、Fragment和自定义View 配合databinding库使用，用于注入</description>
    </item>
    
    <item>
      <title>Android中的Hook技术</title>
      <link>https://www.androidpi.com/android/security/2018-10-09-hooking-in-android/</link>
      <pubDate>Thu, 11 Oct 2018 21:34:15 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/security/2018-10-09-hooking-in-android/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Android模拟定位技术：如何假装玩在夏威夷？</title>
      <link>https://www.androidpi.com/android/lbs/android-mock-location/</link>
      <pubDate>Thu, 11 Oct 2018 21:18:48 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/lbs/android-mock-location/</guid>
      <description>夏威夷，阳光、沙滩、海浪，众人向往的旅游圣地。其中著名的海滩度假地WaiKiKi位于北纬：21.2764314，西经：-157.828641</description>
    </item>
    
    <item>
      <title>如何Root一个Android系统</title>
      <link>https://www.androidpi.com/android/security/2018-10-09-how-to-root-an-android-os/</link>
      <pubDate>Tue, 09 Oct 2018 21:32:43 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/security/2018-10-09-how-to-root-an-android-os/</guid>
      <description></description>
    </item>
    
    <item>
      <title>失落的梦：为什么Android的UI不采用多线程模型？</title>
      <link>https://www.androidpi.com/android/develop/2018-09-25-single-thread-model-of-ui/</link>
      <pubDate>Tue, 25 Sep 2018 16:50:09 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2018-09-25-single-thread-model-of-ui/</guid>
      <description>从观察到的现象来看，在多线程GUI中有一个惊人的趋势，那就是死锁和竞态条件。近些年，这些致力于多线程的聪明人逐渐都转移到一个事件队列模型。“</description>
    </item>
    
    <item>
      <title>LiteRefresh：一种实现下拉刷新的新方式</title>
      <link>https://www.androidpi.com/android/opensource/2018-09-20-literefresh/</link>
      <pubDate>Thu, 20 Sep 2018 23:02:45 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/opensource/2018-09-20-literefresh/</guid>
      <description>项目地址：https://github.com/jastrelax/LiteRefresh 什么是LiteRefersh LiteRefresh</description>
    </item>
    
    <item>
      <title>Android源码：CoordinatorLayout解析</title>
      <link>https://www.androidpi.com/android/ui/2018-08-08-android-coordinatorlayout/</link>
      <pubDate>Sun, 12 Aug 2018 18:55:01 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/ui/2018-08-08-android-coordinatorlayout/</guid>
      <description>CoordinatorLayout AppBarLayout BottomSheet FloatingActionButton.Behavior</description>
    </item>
    
    <item>
      <title>Android应用构建：基于AOP的Gradle日志插件开发</title>
      <link>https://www.androidpi.com/android/building/2018-07-15-aop-based-gradle-log-plugin/</link>
      <pubDate>Sun, 15 Jul 2018 19:45:00 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/building/2018-07-15-aop-based-gradle-log-plugin/</guid>
      <description>什么是AOP 在OOP的程序结构中，不同的类型可以对现实或虚拟的事物及其行为进行建模，不同类型的对象之间相互协作，完成所需的工作。也就是说OO</description>
    </item>
    
    <item>
      <title>Android应用构建：使用Gradle构建脚本进行多渠道打包与APK包名修改</title>
      <link>https://www.androidpi.com/android/building/2018-07-09-specify-apk-name-with-gradle-scripts/</link>
      <pubDate>Mon, 09 Jul 2018 21:42:55 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/building/2018-07-09-specify-apk-name-with-gradle-scripts/</guid>
      <description>Android开发中常常需要进行多渠道打包，并且在包名中加入特定的标识，例如在提测阶段的包名中加入版本号、版本名、打包的时间，便于区分不同的</description>
    </item>
    
    <item>
      <title>Android应用构建：使用Jenkins CI进行自动构建</title>
      <link>https://www.androidpi.com/android/building/2018-07-09-android-app-build-automation-with-jenkins/</link>
      <pubDate>Mon, 09 Jul 2018 14:09:50 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/building/2018-07-09-android-app-build-automation-with-jenkins/</guid>
      <description>下载命令行工具 https://developer.android.com/studio/index.html#command-tools Linux下Android构建环境 下载SDK命令行工具后，使用sdkmanager来下载所需的SDK包和工具。 $ sdkmanager --list 从列表中</description>
    </item>
    
    <item>
      <title>Android应用构建：流程与配置</title>
      <link>https://www.androidpi.com/android/building/2018-07-08-android-app-build-process-and-configuration/</link>
      <pubDate>Sun, 08 Jul 2018 14:24:11 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/building/2018-07-08-android-app-build-process-and-configuration/</guid>
      <description>构建总体流程 Android 构建系统编译应用资源和源代码，然后将它们打包成可供您测试、部署、签署和分发的 APK。 如图 1 所示，典型 Android 应用模块的构建流程通常依</description>
    </item>
    
    <item>
      <title>Android手机唯一设备ID</title>
      <link>https://www.androidpi.com/android/hardware/2018-06-30-android-unique-device-id/</link>
      <pubDate>Sat, 30 Jun 2018 16:41:28 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/hardware/2018-06-30-android-unique-device-id/</guid>
      <description>Android手机用于关联设备的唯一性ID，目前常见的有如下几种类型： 设备ID IMEI MEID ESN 主要使用系统服务TelephonyManager获取。 硬</description>
    </item>
    
    <item>
      <title>获取Android手机MAC地址</title>
      <link>https://www.androidpi.com/android/hardware/2018-06-29-android-mac-address/</link>
      <pubDate>Fri, 29 Jun 2018 22:35:05 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/hardware/2018-06-29-android-mac-address/</guid>
      <description>什么是MAC地址 MAC地址，全称为Media Access Control Address，即介质访问控制地址。它是分配给网络接口控制器（Network Interface Control</description>
    </item>
    
    <item>
      <title>Android开发文档与源代码</title>
      <link>https://www.androidpi.com/android/2018-06-15-android-develop-documents/</link>
      <pubDate>Fri, 15 Jun 2018 21:26:28 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/2018-06-15-android-develop-documents/</guid>
      <description>Google官方文档 首页 文档 开发指南 Android Studio Jetpack Android源代码 Android源代码 下载源代码 Android Open Source Project Android Google Source 源代码Tag清单 Gradle DSL 参考文档 Android Gradle Plugin</description>
    </item>
    
    <item>
      <title>源码分析：理解Context</title>
      <link>https://www.androidpi.com/android/framework/2018-06-14-android-understanding-context/</link>
      <pubDate>Thu, 14 Jun 2018 21:22:35 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/framework/2018-06-14-android-understanding-context/</guid>
      <description>Context一般翻译为上下文，它提供了一个应用环境的全局接口，用于访问指定应用的资源和类，以及各种应用级别的操作，如启动Activitie</description>
    </item>
    
    <item>
      <title>控制Android系统UI的可见性</title>
      <link>https://www.androidpi.com/android/ui/2018-06-11-control-the-system-ui-visibility/</link>
      <pubDate>Mon, 11 Jun 2018 23:28:58 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/ui/2018-06-11-control-the-system-ui-visibility/</guid>
      <description>系统栏（System bars）分为状态栏（status bar）和导航栏（Navigation bar）。 状态栏 导航栏 使系统栏变暗(dim) 这种</description>
    </item>
    
    <item>
      <title>Android屏幕适配</title>
      <link>https://www.androidpi.com/android/ui/2018-06-11-android-screen-adapter/</link>
      <pubDate>Mon, 11 Jun 2018 20:54:15 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/ui/2018-06-11-android-screen-adapter/</guid>
      <description>基础 术语 屏幕尺寸 按屏幕对角测量的实际物理尺寸。 为简便起见，Android 将所有实际屏幕尺寸分组为四种通用尺寸：小、 正常、大和超大。 屏幕密度 屏</description>
    </item>
    
    <item>
      <title>跨平台移动开发技术综述</title>
      <link>https://www.androidpi.com/android/develop/2018-05-19-cross-platform-mobile-develop-overview/</link>
      <pubDate>Sat, 19 May 2018 11:59:31 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2018-05-19-cross-platform-mobile-develop-overview/</guid>
      <description>移动端跨平台技术比较 Cordova与Ionic Cordova是使用Web技术（HTML/CSS/JavaScript）来构建移动应用的一种框</description>
    </item>
    
    <item>
      <title>Android Wi-Fi API兼容性适配</title>
      <link>https://www.androidpi.com/android/wifi/2018-05-14-android-wifi-api-compatibility/</link>
      <pubDate>Mon, 14 May 2018 00:30:44 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/wifi/2018-05-14-android-wifi-api-compatibility/</guid>
      <description>Android 6.0（API 级别 23） 硬件标识符访问权 为给用户提供更严格的数据保护，从此版本开始，对于使用 WLAN API 和 Bluetooth API 的应用，Android 移除了对设备本</description>
    </item>
    
    <item>
      <title>Android Wi-Fi 开发指南</title>
      <link>https://www.androidpi.com/android/wifi/2018-05-09-android-wifi-develop-guide/</link>
      <pubDate>Wed, 09 May 2018 23:59:14 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/wifi/2018-05-09-android-wifi-develop-guide/</guid>
      <description>Wi-Fi管理与操作 使用Android平台提供的SDK可以处理若干如下类别的项目： 已配置过的网络列表，列表可以查看并进行更新，并且可以修改每</description>
    </item>
    
    <item>
      <title>Android Wi-Fi API 参考</title>
      <link>https://www.androidpi.com/android/wifi/2018-05-09-android-wifi-api-reference/</link>
      <pubDate>Wed, 09 May 2018 22:59:14 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/wifi/2018-05-09-android-wifi-api-reference/</guid>
      <description>Wi-Fi相关API包名 android.net.wifi android.net.wifi.aware android.net.wifi.hotspot2 android.net.wifi.hotspot2.omadm android.net.wifi.hotspot2.pps android.net.wifi.p2p android.net.wifi.p2p.nsd android.net.wifi.rtt android.net.wifi Wi-Fi API为应用提供了一种方法，使其可以和提供Wi-Fi网络访问的底层无线技术栈进行通信。所提供的A</description>
    </item>
    
    <item>
      <title>Android应用兼容性问题</title>
      <link>https://www.androidpi.com/android/develop/2018-04-22-android-app-compatibility-issue/</link>
      <pubDate>Sun, 22 Apr 2018 23:24:06 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2018-04-22-android-app-compatibility-issue/</guid>
      <description>Android系统Native库 Android系统版本分布的碎片化导致所使用的本地库版本的碎片化，有可能会使用相当过时的本地库。 SQLite SQLit</description>
    </item>
    
    <item>
      <title>Android平台版本兼容性适配</title>
      <link>https://www.androidpi.com/android/develop/2018-04-16-android-api-level-compatibility-adapter/</link>
      <pubDate>Mon, 16 Apr 2018 19:33:31 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2018-04-16-android-api-level-compatibility-adapter/</guid>
      <description>平台版本 截止于 2018 年 1 月 8 日 Version Codename API Distribution 2.3.3-2.3.7 Gingerbread 10 0.3% 4.0.3-4.0.4 Ice Cream Sandwich 15 0.4% 4.1.x Jelly Bean 16 1.5% 4.2.x Jelly Bean 17 2.2% 4.3 Jelly Bean 18 0.6% 4.4 KitKat 19 10.3% 5.0 Lollipop 21 4.8% 5.1 Lollipop 22 17.6% 6.0 Marshmallow 23 25.5% 7.0 Nougat 24 22.9% 7.1 Nougat 25 8.2% 8.0 Oreo 26 4.9%</description>
    </item>
    
    <item>
      <title>Android View事件处理机制与分发流程</title>
      <link>https://www.androidpi.com/android/framework/2018-03-11-android-view-event-dispatching/</link>
      <pubDate>Sun, 11 Mar 2018 16:00:39 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/framework/2018-03-11-android-view-event-dispatching/</guid>
      <description>View类还包含一系列嵌套接口以及您可以更加轻松定义的回调。 这些接口称为事件侦听器，是您捕获用户与UI之间交互的票证。 尽管您通常会使用事件侦</description>
    </item>
    
    <item>
      <title>Android View绘制流程</title>
      <link>https://www.androidpi.com/android/framework/2018-03-08-android-view-drawing-flow/</link>
      <pubDate>Sun, 11 Mar 2018 15:00:39 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/framework/2018-03-08-android-view-drawing-flow/</guid>
      <description>概述 当一个Activity接收到焦点，它会请求对其布局进行绘制。Android框架会处理绘制的流程，但Activity必须提供布局层次的一个</description>
    </item>
    
    <item>
      <title>Window与WindowManager机制</title>
      <link>https://www.androidpi.com/android/framework/2018-03-08-android-window/</link>
      <pubDate>Sat, 10 Mar 2018 22:22:08 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/framework/2018-03-08-android-window/</guid>
      <description>接着Activity的启动流程分析Window的添加过程，与Activity相关联的window的创建发生在Activity.perform</description>
    </item>
    
    <item>
      <title>Activity启动流程：总览</title>
      <link>https://www.androidpi.com/android/framework/2018-03-07-android-launch-activity/</link>
      <pubDate>Wed, 07 Mar 2018 21:10:03 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/framework/2018-03-07-android-launch-activity/</guid>
      <description>网络上已经有许多关于这个主题的文章了，但路只有自己走一遍才会熟悉，源码的分析与理解也是一样的。因此从这篇文章开始我将开始从源码阅读中去理解A</description>
    </item>
    
    <item>
      <title>Android系统启动流程</title>
      <link>https://www.androidpi.com/android/framework/2018-03-04-android-system-init-process/</link>
      <pubDate>Sun, 04 Mar 2018 18:31:20 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/framework/2018-03-04-android-system-init-process/</guid>
      <description>Android系统架构 1 2</description>
    </item>
    
    <item>
      <title>Android面试</title>
      <link>https://www.androidpi.com/android/2018-02-23-android-interview/</link>
      <pubDate>Fri, 23 Feb 2018 14:46:13 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/2018-02-23-android-interview/</guid>
      <description>Android 四大组件 对Context的理解 关于一个应用环境的全局接口。用于访问特定应用的资源和类，以及各种应用级别的操作，如启动Activities与</description>
    </item>
    
    <item>
      <title>ViewModel与savedInstanceState</title>
      <link>https://www.androidpi.com/android/develop/2017-12-04-viewmodel-vs-savedinstancestate/</link>
      <pubDate>Mon, 04 Dec 2017 01:22:03 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2017-12-04-viewmodel-vs-savedinstancestate/</guid>
      <description>在Activity或Fragment的onSaveInstanceState方法中保存UI状态 如果一个Activity没有直接退出，而是通过</description>
    </item>
    
    <item>
      <title>从MVC到MVVM</title>
      <link>https://www.androidpi.com/android/architecture/2018-07-08-from-mvc-to-mvvm/</link>
      <pubDate>Sat, 08 Jul 2017 12:38:56 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/architecture/2018-07-08-from-mvc-to-mvvm/</guid>
      <description>MVP与MVVM，该选哪一个？ 目前为止，我在工作中用过的应用架构有基于Otto的总线模式和MVP模式，业余时间使用Clean架构和MVVM做</description>
    </item>
    
    <item>
      <title>迁移到Kotlin</title>
      <link>https://www.androidpi.com/android/develop/2017-05-21-migrate-to-kotlin/</link>
      <pubDate>Sun, 21 May 2017 15:05:44 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2017-05-21-migrate-to-kotlin/</guid>
      <description>Google I/O已落下帷幕，Google 宣布将战略重心由Mobile转移到AI，这也是时下流行了。作为Android开发者，当然更关心Android</description>
    </item>
    
    <item>
      <title>Android应用内存优化</title>
      <link>https://www.androidpi.com/android/develop/2016-11-16-android-memory-optimization/</link>
      <pubDate>Wed, 16 Nov 2016 16:33:27 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2016-11-16-android-memory-optimization/</guid>
      <description>使用Android监控器优化内存使用 使用Android监控器可以可视化监控app的内存使用： 随着时间展示可用的和分配的Java内存 随着时间展</description>
    </item>
    
    <item>
      <title>Android测试驱动开发</title>
      <link>https://www.androidpi.com/android/develop/2016-08-08-android-testing/</link>
      <pubDate>Mon, 08 Aug 2016 16:43:22 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2016-08-08-android-testing/</guid>
      <description>使用迭代式开发工作流程 在迭代开发一个功能时，着手编写一个新的测试或者向已有的单元测试中添加用例和断言，测试一开始会失败，是因为功能还未实现。</description>
    </item>
    
    <item>
      <title>Dagger2 Api</title>
      <link>https://www.androidpi.com/android/library/2016-07-12-dagger2-api/</link>
      <pubDate>Tue, 12 Jul 2016 23:29:50 +0800</pubDate>
      
      <guid>https://www.androidpi.com/android/library/2016-07-12-dagger2-api/</guid>
      <description>Component注解 Component注解用于注解一个接口或抽象类，以便从其Module集合中生成一个完全成型的依赖注入实现。 每个使用@C</description>
    </item>
    
    <item>
      <title>Android LBS开发指南</title>
      <link>https://www.androidpi.com/android/lbs/android-lbs-develop-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/lbs/android-lbs-develop-guide/</guid>
      <description>GPS坐标 地图坐标系 高德地图API的坐标系 高德地图API使用的坐标体系，为国测局规定的GCJ-02坐标系，是国内的标准坐标体系。区别于GPS</description>
    </item>
    
    <item>
      <title>Android安全之加壳</title>
      <link>https://www.androidpi.com/android/security/2018-06-17-android-security-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/security/2018-06-17-android-security-shell/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Android开发架构演进</title>
      <link>https://www.androidpi.com/android/architecture/2018-07-08-android-architecture-evolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/architecture/2018-07-08-android-architecture-evolution/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Android架构：组件化开发</title>
      <link>https://www.androidpi.com/android/architecture/2018-08-18-android-architecture-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/architecture/2018-08-18-android-architecture-component/</guid>
      <description>资源 参考 Non-constant Fields in Case Labels</description>
    </item>
    
    <item>
      <title>Android源码：嵌套滑动及其分发流程</title>
      <link>https://www.androidpi.com/android/ui/2018-08-15-android-nested-scroll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/ui/2018-08-15-android-nested-scroll/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Android热修复技术综述</title>
      <link>https://www.androidpi.com/android/hotfix/2018-07-21-android-hotfix-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/hotfix/2018-07-21-android-hotfix-overview/</guid>
      <description>安卓App热补丁动态修复技术介绍 tinker</description>
    </item>
    
    <item>
      <title>Android网络开发指南</title>
      <link>https://www.androidpi.com/android/networks/2018-5-14-android-networks-develop-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/networks/2018-5-14-android-networks-develop-guide/</guid>
      <description></description>
    </item>
    
    <item>
      <title>什么是Fragment</title>
      <link>https://www.androidpi.com/android/framework/2018-06-17-android-fragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/framework/2018-06-17-android-fragment/</guid>
      <description>为什么需要Fragment? 在官方文档的翻译中，Fragment译为片段。那么它是谁的片段？当然是Activity的，其目的在于解决如下几个</description>
    </item>
    
    <item>
      <title>实现PinView</title>
      <link>https://www.androidpi.com/android/develop/2018-07-04-implement-a-pin-editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/develop/2018-07-04-implement-a-pin-editor/</guid>
      <description>KeyEvent As soft input methods can use multiple and inventive ways of inputting text, there is no guarantee that any key press on a soft keyboard will generate a key event: this is left to the IME&amp;rsquo;s discretion, and in fact sending such events is discouraged. You should never rely on receiving KeyEvents for any key on a soft input method. In particular, the default software keyboard will never send</description>
    </item>
    
    <item>
      <title>理解ListView</title>
      <link>https://www.androidpi.com/android/ui/2018-06-17-android-listview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/ui/2018-06-17-android-listview/</guid>
      <description></description>
    </item>
    
    <item>
      <title>理解RecyclerView</title>
      <link>https://www.androidpi.com/android/ui/2018-06-17-android-recyclerview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.androidpi.com/android/ui/2018-06-17-android-recyclerview/</guid>
      <description>NestedScrollView中的RecyclerView RecyclerView实现了NestedScrollingChild，而Nes</description>
    </item>
    
  </channel>
</rss>