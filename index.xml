<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>androidpi</title>
    <link>https://epicmars.github.io/</link>
    <description>Recent content on androidpi</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Nov 2017 17:09:39 +0800</lastBuildDate>
    <atom:link href="https://epicmars.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin数据类型</title>
      <link>https://epicmars.github.io/kotlin/2017-11-01-kotlin-data-types/</link>
      <pubDate>Wed, 01 Nov 2017 17:09:39 +0800</pubDate>
      <guid>https://epicmars.github.io/kotlin/2017-11-01-kotlin-data-types/</guid>
      <description>参考： 基本类型 相等性 空指针安全性 类型检查与转换 Java中有8种基本类型byte，short，int，long，float，double，bo</description>
    </item>
    <item>
      <title>Kotlin高阶函数与Lambdas</title>
      <link>https://epicmars.github.io/kotlin/2017-10-30-kotlin-lambdas/</link>
      <pubDate>Mon, 30 Oct 2017 16:34:18 +0800</pubDate>
      <guid>https://epicmars.github.io/kotlin/2017-10-30-kotlin-lambdas/</guid>
      <description>参考： Lambdas 高阶函数 一个高阶函数接收函数作为其参数，或者返回一个函数。举个栗子，如下所示，lock()函数接收一个lock对象和一个函数，获取锁</description>
    </item>
    <item>
      <title>Kotlin对象</title>
      <link>https://epicmars.github.io/kotlin/2017-10-30-kotlin-object/</link>
      <pubDate>Mon, 30 Oct 2017 15:18:46 +0800</pubDate>
      <guid>https://epicmars.github.io/kotlin/2017-10-30-kotlin-object/</guid>
      <description>参考: 对象声明 对象表达式和声明（Object Expressions and Declarations） 对象表达式（Object expressions） Object表达式</description>
    </item>
    <item>
      <title>Kotlin类的定义</title>
      <link>https://epicmars.github.io/kotlin/2017-10-30-kotlin-class-definition/</link>
      <pubDate>Mon, 30 Oct 2017 14:36:02 +0800</pubDate>
      <guid>https://epicmars.github.io/kotlin/2017-10-30-kotlin-class-definition/</guid>
      <description>数据类（Data Classes） 我们常常创建仅仅持有数据的类，类似Java中的POJO或JavaBean，其对象我们一般称为实体（entit</description>
    </item>
    <item>
      <title>Kotlin类属性与常量</title>
      <link>https://epicmars.github.io/kotlin/2017-10-30-kotlin-properties/</link>
      <pubDate>Mon, 30 Oct 2017 03:37:02 +0800</pubDate>
      <guid>https://epicmars.github.io/kotlin/2017-10-30-kotlin-properties/</guid>
      <description>参考： 对象表达式与声明 类属性 类属性是定义在类中的变量或不变量，分别使用var和val定义。这里把Kotlin中的不变量和常量作下区分，不变量</description>
    </item>
    <item>
      <title>Kotlin类与继承</title>
      <link>https://epicmars.github.io/kotlin/2017-10-29-kotlin-class-inheritance/</link>
      <pubDate>Sun, 29 Oct 2017 15:27:43 +0800</pubDate>
      <guid>https://epicmars.github.io/kotlin/2017-10-29-kotlin-class-inheritance/</guid>
      <description>类定义 类声明由类名、类首部（指定类型参数，主构造器等）、类正文（用花括号包围）。类首部和正文都是可选的。因此最简单的类定义为： class Empty // Implicitly inherits from Any</description>
    </item>
    <item>
      <title>Kotlin函数</title>
      <link>https://epicmars.github.io/kotlin/2017-10-29-kotlin-function/</link>
      <pubDate>Sun, 29 Oct 2017 12:43:52 +0800</pubDate>
      <guid>https://epicmars.github.io/kotlin/2017-10-29-kotlin-function/</guid>
      <description>参考: 函数 函数(Function) Kotlin使用名称函数（function）而非方法（method），我想是为了与Java方法作出区分，和</description>
    </item>
    <item>
      <title>从MVC到MVVM</title>
      <link>https://epicmars.github.io/android/architecture/2018-07-08-from-mvc-to-mvvm/</link>
      <pubDate>Sat, 08 Jul 2017 12:38:56 +0800</pubDate>
      <guid>https://epicmars.github.io/android/architecture/2018-07-08-from-mvc-to-mvvm/</guid>
      <description>MVP与MVVM，该选哪一个？ 目前为止，我在工作中用过的应用架构有基于Otto的总线模式和MVP模式，业余时间使用Clean架构和MVVM做</description>
    </item>
    <item>
      <title>Dagger2 Api</title>
      <link>https://epicmars.github.io/android/library/2016-07-12-dagger2-api/</link>
      <pubDate>Tue, 12 Jul 2016 23:29:50 +0800</pubDate>
      <guid>https://epicmars.github.io/android/library/2016-07-12-dagger2-api/</guid>
      <description>Component注解 Component注解用于注解一个接口或抽象类，以便从其Module集合中生成一个完全成型的依赖注入实现。 每个使用@C</description>
    </item>
  </channel>
</rss>
